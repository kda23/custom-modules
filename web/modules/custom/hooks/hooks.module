<?php
use Drupal\node\Entity\Node;
use Drupal\field\FieldConfigInterface;
use \Drupal\Core\Entity\EntityTypeManagerInterface;
use \Drupal\Core\Entity\EntityTypeRepository;
use \Drupal\node\Entity;
use \Drupal\Core\Entity\ContentEntityBase;
use Drupal\taxonomy\Entity\Term;
use \Drupal\Core\Entity\EntityInterface;
use Drupal\taxonomy\entity\Vocabulary;

/**
 * Implements hook_preprocess_page().
 */
//function hooks_preprocess_article_list(&$variables)
//{
//    $x = 0;
//    $values = [
//        'type' => 'article',
//    ];
//    $today = strtotime("today", REQUEST_TIME);
//    $node = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties($values);
//    foreach ($node as $time) {
//        $x++;
//        $some[$x] = $time->get('revision_timestamp')->value;
//        if ($some[$x] > $today) {
//            $titleArticle[] = $time->get('title')->value;
//        }
//    }
//    dump($titleArticle);
//}

function hooks_preprocess_article_list(&$variables) {
    $startNode  =  strtotime("today", REQUEST_TIME);
    $query = \Drupal::entityQuery('node');
    $node_id = $query->condition('created', $startNode, '>=')->execute();
    $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($node_id);
    foreach ($nodes as $node) {
        $variables['itemTitles'][] = $node->title->value;
    }
}

/**
 * Implements hook_preprocess_node().
 */
function hooks_preprocess_node__article(&$variables)
{
    $userRoles = \Drupal::currentUser()->getRoles();
    if ($userRoles['1'] == 'administrator') {
        $node = $variables['node'];
        $langNodes = [];
        $languages = $node->getTranslationLanguages();
        foreach ($languages as $language) {
            $langCode = $language->getId();
            $langName = $language->getName();
            $langNodes[$langCode]['langtitle'] = $langName;
            $langNodes[$langCode]['url'] = $node->getTranslation($langCode)->toUrl('canonical', ['absolute' => TRUE])->toString() . '/edit';
        }
        $variables['lang'] = $langNodes;
        $variables['currentUser'] = $userRoles;
    }

    // Entity reference field name.
    $node = \Drupal::request()->attributes->get('node');
    if ($node) {
        $article = $node->getType();
        // Make sure the node has term field.
        if ($article == 'article') {
            $field_name = 'field_term';
            $referenced_entities = $node->get($field_name)->referencedEntities();
            // Get terms and vocabulary names
            foreach ($referenced_entities as $term) {
                $variables['term'][] = $term->getName();
                $variables['vocabularies'][] = $term->bundle();
            }
            $countTerm = count($variables['term']);
            // Get vocabulary description
            for ($x = 0; $x < $countTerm; $x++) {
                $vocabularies = $variables['vocabularies'][$x];
                $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($vocabularies);
                $variables['vocabulariDescr'][] = $vocabulary->getDescription();
            }
            if ($variables['term']) {
            sort($variables['term']);
                for ($x = 0; $x < $countTerm; $x++) {
                    $variables['arrayTaxonomy'][] = $variables['term'][$x] . " - " . $variables['vocabularies'][$x];
                }
            }
        }
    }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hooks_theme_suggestions_node_alter(array &$suggestions, array $variables) {
    $suggestions[] = 'node__' . 'article';
}

/**
 * Implements hook_theme().
 */
function hooks_theme($existing, $type, $theme, $path) {
    return [
        'article_list' => [
            'variables' => [
                'items' => [],
                'title' => '',
                'path' => drupal_get_path('module', 'hooks') . '/templates',
            ]
        ],
        'node__article' => [
            'template' => 'node--article',
            'base hook' => 'node',
        ],
    ];
}


//function hooks_preprocess_page(&$variables)
//{
//    $values = [
//        'type' => 'article',
//    ];
//    $today = strtotime(date("Y-m-d"));
//    $node = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties($values);
//    dump($node['1']);
//    $items = $node['1']->field_term;
//    dump($items);
//}

//function hooks_preprocess_html(&$variables)
//{
//    // Entity reference field name.
//    $field_name = 'field_term';
//    // Get the node object from the visited page.
//    // If the page is not a node, it'll return NULL.
//    $node = \Drupal::request()->attributes->get('node');
//    if ($node) {
//        $article = $node->getType();
//    // Make sure the node has term field.
//        if ($article == 'article') {
//            $referenced_entities = $node->get($field_name)->referencedEntities();
//            foreach ($referenced_entities as $term) {
//                $variables['term'][] = $term->getName();
//                $variables['vocabularies'][] = $term->bundle();
//            }
//            $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load('termin');
//            $vocabularyDescription = $vocabulary->getDescription();
//            echo $vocabularyDescription;
//            $countTerm = count($variables['term']);
//            if ($variables['term']) {
//                sort($variables['term']);
//                for ($x = 0; $x < $countTerm; $x++) {
//                    echo $variables['term'][$x] . " - " . $variables['vocabularies'][$x] . "<br>";
//                }
//            }
//        }
//    }
//}

//
//function taxonomy_vocabulary_save($vocabulary)
//{
//    // Prevent leading and trailing spaces in vocabulary names.
//    if (!empty($vocabulary->name)) {
//        $vocabulary->name = trim($vocabulary->name);
//
//    }
//    dump($vocabulary);
//    // Load the stored entity, if any.
//    if (!empty($vocabulary->vid)) {
//        if (!isset($vocabulary->original)) {
//            $vocabulary->original = entity_load_unchanged('taxonomy_vocabulary', $vocabulary->vid);
//        }
//        // Make sure machine name changes are easily detected.
//        // @todo: Remove in Drupal 8, as it is deprecated by directly reading from
//        // $vocabulary->original.
//        $vocabulary->old_machine_name = $vocabulary->original->machine_name;
//    }
//}
//
//function some () {
//    $vocabulary = Vocabulary::load($this->vocabulary->id());
//    $vocabulary_name = Vocabulary::load($this->vocabulary->name());
//    dump($vocabulary);
//    if ($variables['term']) {
//        sort($variables['term']);
//        for ($x = 0; $x < 10; $x++) {
//            echo $variable . "" .;
//        }
//}


